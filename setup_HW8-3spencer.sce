// setup.sce

//   Set up key variables for control design search.
//
//  version: 27-Sept-2011
//
//  use Version 4 of optigain to speed up when system is unstable
//     (15-Oct-2013)

//   test with v5 of optigain to study gain margin

//   17-Nov-13:  New feature - add a loop for repeated runs

//  For use in EE447 wk 8, Nov 2013



// *********************************************************************
//  Instructions:    Search for "xxx" and replace with the values for
//                     your problem. 
//**********************************************************************


clear;            //  erase all the scilab variables
xdel(winsid());   // close all graphics windows which might be open
funcprot(0);      // allow functions to be redefined without warnings.

// some handy functions for user input
function v = getf(promptstring, default)// get a float
    st = sprintf("[%f]",default)  
    x = input(promptstring+st)
    if(length(x) == 0) // user hit return
       v = default
   else
       v = x;
   end
endfunction
function v = geti(promptstring, default)// get an int
    st = sprintf("[%d]",default)  
    x = input(promptstring+st)
    if(length(x) == 0) // user hit return
       v = default
   else
       v = x;
   end
endfunction
 
/////////////////////  get info for speed estimate
//  if a stored rate file is around, use that (because it is generated by
//       previous simulation run on your computer)
try
    load('simrate_optigain','rate');
    npermin = rate; 
    printf ("Found rate file: %d simulations per min.\n",npermin);
catch  // if there is no simrate_optigain file
    npermin = 600;//  how many step responses per min on this computer
end

s = %s;        j = %i;

Htf = s/s;            //  this is how you need to say "H=1"
H = syslin('c', Htf);

////////////////////////////////////////////////////////////////
//
//       plant definition
//
//    Enter the plant from your problem here

// Plant Transfer Function

n = 10^4
//d = real((s+1.2)*(s+0.2+j)*(s+0.2-j));
d =  (s+15)*real((s+1+8*j)*(s+1-8*j))
plant  =      syslin('c', n/d);

///////////////////////// regularization pole for PID controller
////  set this about 10 times higher than highest plant pole/zero
pp = 150.0;  //  pole to rationalize PID controller

////////////////////////////   Desired Performance

tsd =    0.66;   // Desired Settling Time
pod =    1.01;   // Desired Percent Overshoot
ssed =    0.0;   // Desired Steady State Error
gmd =      20;   // Desired Gain Margin in dB

cu_max =  3.0;  //  Normalization value for control effort.

/////  how long to run the step response simulation
//  typical value: 3 to 5 x Ts
tmax = 3.0;  // seconds (typically set this to 3-5xTs)
dt = tmax/100;  // time increment for simulation

////////////////////////////   Search range and step

nvals = 5 ; // number of gain values to try btwn kmax and kmin

//  Search region setting:   set K1-K3 for the "center" PID values
 
// 12/2/2013 - 4:47pm
// The K values below were obtained from smartrootlocus2.sce
// with controller ((s+5+6*j)*(s+5-6*j))/s
 
 
// Kp center value
K1 = 2.924;

// KI center value
K2 = 17.8364;

// Kd center value
K3 = .2924;

//   "center values" are logarithmic midpoint of search range

scale_range = 10;    // how big a range to search.

//////////////////////////////////////////////////////////////////////
////////////////////// end of user settings

// compute estimate of the search time
tsearch=((nvals+1)^3)/npermin;
if(tsearch < 120) then
   printf("\n\nEstimated search time: %4.1f minutes\n", tsearch);
   else
   printf("\n\nEstimated search time: %4.1f hours\n", tsearch/60.0);
 end

// start the optimization run

//PD control only
//exec('optigainPD.sce',-1);

// start the optimization
exec('optigain6.sce',-1);

// End of first optimization!
// Next, interactive continuation for additional runs:

ans = 1;
cont = geti("Do you want to try again? (1/0)",ans);

while(cont)         
        for(i=1:Ns),
           printf("%2d  %s\n",i,wnames(i));
        end
        selec = 6;
        selec = geti("Which gain set do you like (1-6): ",selec)

        // set the initial gain values according to selection
        K1 = Kpo(selec);
        K2 = Kio(selec);
        K3 = Kdo(selec);

        // ask users for search parameters
        nvals       = geti("Number of values: ",nvals) 
        scale_range = getf("Scale range: ",scale_range)

        // estimate search time
        tsearch=((nvals+1)^3)/npermin;
        if(tsearch < 120) then
            printf("\n\nEstimated search time: %4.1f minutes\n", tsearch);
            else
            printf("\n\nEstimated search time: %4.1f hours\n", tsearch/60.0);
        end
        // start the optimzation run: PD control only
        //exec('optigainPD.sce',-1);
        // start the optimzation run
        exec('optigain6.sce',-1);
        cont = geti("Do you want to try again? (1/0)",1)
        clrg = geti("Do you want to close the graphs? (1/0)",0)
        if(clrg==1)
            xdel(winsid());   // close all graphics windows which might be open
        end        
end
// at this point user is done...

